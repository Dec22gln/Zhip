// MARK: - Generic
"Generic.OK" = "OK";
"Generic.Close" = "Close";
"Generic.Next" = "Next";
"Generic.Skip" = "Skip";
"Generic.Back" = "Back";

"Error.Input.Address.ContainsNonHexadecimal" = "Only 0-9 and A-F allowed";
"Error.Input.Address.TooShort" = "Address is too short, should be %d";
"Error.Input.Address.TooLong" = "Address is too long, should be %d";

"Error.Input.Amount.NonNumericString" = "String not a number";
"Error.Input.Amount.TooSmall" = "Must be at lest %@";
"Error.Input.Amount.TooLarge" = "Must be at most %@";
"Error.Input.Amount.ExceedingBalance" = "Insufficient funds";

"Error.Input.Passphrase.TooShort" = "Passphrase have length >%d";

// MARK: - Common for Views
"View.PullToRefreshControl.Title" = "Pull to refresh";

// MARK: - Onboarding

// MARK: Welcome
"Scene.Welcome.Label.Header" = "Welcome";
"Scene.Welcome.Label.Body" = "Welcome to Zhip - the worlds first and only iOS wallet for Zilliqa.";
"Scene.Welcome.Button.Start" = "Start";

// MARK: TermsOfService
"Scene.TermsOfService.Button.Accept" = "Accept";

// MARK: AskForAnalyticsPermissions
"Scene.AskForAnalyticsPermissions.Title" = "Analytics disclaimer";
"Scene.AskForAnalyticsPermissions.Text.Disclaimer" = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
"Scene.AskForAnalyticsPermissions.Checkbox.ReadDisclaimer" = "I have read the analytics disclaimer";
"Scene.AskForAnalyticsPermissions.Button.Accept" = "Accept";
"Scene.AskForAnalyticsPermissions.Button.Decline" = "Decline";

// MARK: WarningERC20
"Scene.WarningERC20.Title" = "⚠️ WARNING ⚠️";
"Scene.WarningERC20.Text.WarningERC20" = "This is a Zilliqa testnet. Please do not send any interim ERC-20 ZIL tokens to this wallet.\n\nZilliqa and the Ethereum blockchain are two completely separate platforms and the mneumonic phrases, private keys, addresses and tokens CANNOT be shared.\n\nTransferring assets directly from Ethereum to Zilliqa (or vice versa) will cause irreparable loss.";
"Scene.WarningERC20.Button.Accept" = "I understand";
"Scene.WarningERC20.Button.DoNotShowAgain" = "Do not show this again";

// MARK: ChooseWallet
"Scene.ChooseWallet.Title" = "Add Wallet";
"Scene.ChooseWallet.Button.NewWallet" = "New Wallet";
"Scene.ChooseWallet.Button.RestoreWallet" = "Restore Wallet";

// MARK: CreateNewWallet
"Scene.CreateNewWallet.Title" = "New wallet";
"Scene.CreateNewWallet.Label.ChooseNewPassphrase" = "Choose new passphrase";
"Scene.CreateNewWallet.Field.EncryptionPassphrase" = "Encryption passphrase (min %d chars)";
"Scene.CreateNewWallet.Field.ConfirmEncryptionPassphrase" = "Confirm encryption passphrase";
"Scene.CreateNewWallet.Label.UrgeBackup" = "⚠️ I understand that I'm responsible for securely backing up the encryption passphrase and might suffer permanent loss of all assets if I fail to do so.";
"Scene.CreateNewWallet.Checkbox.PassphraseIsBackedUp" = "Passphrase is backed up";
"Scene.CreateNewWallet.Button.CreateNewWallet" = "Create new wallet";

// MARK: BackupWallet
"Scene.BackupWallet.Title" = "Backup Wallet";
"Scene.BackupWallet.Label.StoreKeystoreSecurely" = "Store the keystore + passphrase somewhere safe (e.g. 1Password)";
"Scene.BackupWallet.Button.CopyKeystore" = "Copy keystore";
"Scene.BackupWallet.Button.RevealKeystore" = "Reveal keystore";
"Scene.BackupWallet.Button.RevealPrivateKey" = "Reveal private key";
"Scene.BackupWallet.Label.UrgeSecureBackupOfKeystore" = "⚠️ I understand that I'm responsible for securely backing up the keystore and might suffer permanent loss of all assets if I fail to do so.";
"Scene.BackupWallet.Checkbox.KeystoreIsBackedUp" = "Keystore is backed up";
"Scene.BackupWallet.Button.HaveBackedUpProceed" = "I've backed up, proceed";
"Scene.BackupWallet.Event.Toast.DidCopyKeystore" = "Copied keystore";

// MARK: Backup KeyPair
"Scene.DecryptKeystoreToRevealKeyPair.Title" = "Decrypt keystore";
"Scene.DecryptKeystoreToRevealKeyPair.Field.EncryptionPassphrase" = "Encryption passphrase (min %d chars)";
"Scene.DecryptKeystoreToRevealKeyPair.Button.Reveal" = "Reveal";

"Scene.BackUpRevealedKeyPair.Title" = "Backup key pair";
"Scene.BackUpRevealedKeyPair.Label.PrivateKey" = "Private key";
"Scene.BackUpRevealedKeyPair.Label.UncompressedPublicKey" = "Uncompressed public key";
"Scene.BackUpRevealedKeyPair.Button.CopyPrivateKey" = "Copy private key";
"Scene.BackUpRevealedKeyPair.Button.CopyPublicKey" = "Copy public key";
"Scene.BackUpRevealedKeyPair.Event.Toast.DidCopyPrivateKey" = "Copied private key";
"Scene.BackUpRevealedKeyPair.Event.Toast.DidCopyPublicKey" = "Copied public key";

// MARK: BackUp Keystore
"Scene.BackUpKeystore.Title" = "Keystore";
"Scene.BackUpKeystore.Button.Copy" = "Copy";
"Scene.BackUpKeystore.Event.Toast.DidCopyKeystore" = "Copied keystore";

// MARK: RestoreWallet
"Scene.RestoreWallet.Title" = "Restore Wallet";
"Scene.RestoreWallet.Segment.PrivateKey" = "Private key";
"Scene.RestoreWallet.Segment.Keystore" = "Keystore";
"Scene.RestoreWallet.Field.PrivateKey" = "Private key";
"Scene.RestoreWallet.Field.EncryptionPassphrase" = "Encryption passphrase (min %d chars)";
"Scene.RestoreWallet.Field.ConfirmEncryptionPassphrase" = "Confirm encryption passphrase";
"Scene.RestoreWallet.Button.RestoreWallet" = "Restore Wallet";

// MARK: ChoosePincode
"Scene.ChoosePincode.Title" = "Set app PIN";
"Scene.ChoosePincode.Button.ProceedWithConfirmation" = "Proceed";
"Scene.ChoosePincode.Text.PincodeOnlyLocksApp" = "This pincode is optional and is only used to lock this app when you close it, its purpose is to protect against unwanted users to access the app. This pincode has nothing to do with the cryptography related to you wallet. However, if you have not backed up your wallet and forget this pincode you will be locked out of this app and thus your wallet";


// MARK: ConfirmNewPincode
"Scene.ConfirmNewPincode.Title" = "Confirm app PIN";
"Scene.ConfirmNewPincode.Checkbox.PincodeIsBackedUp" = "I've backed up my PIN code";
"Scene.ConfirmNewPincode.Button.ConfirmPincode" = "Confirm";


// MARK: - Main Flow

// MARK: Main
"Scene.Main.Label.Balance.Title" = "Your balance";
"Scene.Main.Label.Balance.Value" = "%@ ZILs";
"Scene.Main.Button.Send" = "Send";
"Scene.Main.Button.Receive" = "Receive";

// MARK: Unlock App
"Scene.UnlockAppWithPincode.Title" = "Unlock app";

// MARK: Remove Pincode
"Scene.RemovePincode.Title" = "Unlock to remove";
"Scene.RemovePincode.Event.Toast.DidRemovePincode" = "Pincode removed";

// MARK: PrepareTransaction
"Scene.PrepareTransaction.Title" = "Send";
"Scene.PrepareTransaction.Field.Recipient" = "To address";
"Scene.PrepareTransaction.Field.Amount" = "Amount";
"Scene.PrepareTransaction.Label.GasInSmallUnits" = "Gas price is measured in 10^-12 Zil";
"Scene.PrepareTransaction.Field.GasPrice" = "Gas price (min %@)";
"Scene.PrepareTransaction.Field.EncryptionPassphrase" = "Encryption passphrase";
"Scene.PrepareTransaction.Button.Send" = "Send";
"Scene.PrepareTransaction.Label.TransactionId" = "Transaction Id";
"Scene.PrepareTransaction.Labels.Balance.Title" = "Current balance";
"Scene.PrepareTransaction.Labels.Balance.Value" = "%@ ZILs";

// MARK: ScanQRCode
"Scene.ScanQRCode.Title" = "Scan QR";

// MARK: SignTransaction
"Scene.SignTransaction.Label.SignTransactionWithEncryptionPassphrase" = "Confirm transaction with your passphrase";
"Scene.SignTransaction.Field.EncryptionPassphrase" = "Encryption passphrase";
"Scene.SignTransaction.Button.Confirm" = "Confirm";

// MARK: PollTransactionStatus
"Scene.PollTransactionStatus.Title" = "Wait for consensus";
"Scene.PollTransactionStatus.Label.WaitingOnReceipt" = "Your transaction has successfully been broadcasted to the network. You can either wait a minute or two for the receipt that the network has reached consensus about your transaction or you can close this screen and recheck your balance later.";
"Scene.PollTransactionStatus.Button.Skip" = "Skip waiting";

// MARK: TransactionConfirmation
"Scene.GotTransactionReceipt.Title" = "Confirmed";
"Scene.GotTransactionReceipt.Label.Confirmed" = "The network has successfully confirmed your transaction.";
"Scene.GotTransactionReceipt.Labels.Fee.Title" = "Transaction fee";
"Scene.GotTransactionReceipt.Labels.Fee.Value" = "%@E-12 Zil";
"Scene.GotTransactionReceipt.Button.OpenDetailsInBrowser" = "Open details in browser";


// MARK: Recieve
"Scene.Receive.Title" = "Receive";
"Scene.Receive.Label.MyPublicAddress" = "My public address";
"Scene.Receive.Button.CopyMyAddress" = "Copy address";
"Scene.Receive.Button.Share" = "Share address";
"Scene.Receive.Event.Toast.DidCopyAddress" = "Copied address";
"Scene.Receive.Field.Amount" = "Amount";

// MARK: - Settings
"Scene.Settings.Title" = "Settings";

"Scene.Settings.Cell.RemovePincode" = "Remove pincode";
"Scene.Settings.Cell.SetPincode" = "Set pincode";

"Scene.Settings.Cell.StarUsOnGithub" = "Star us on Github";
"Scene.Settings.Cell.ReportIssueOnGithub" = "Report issue on Github";
"Scene.Settings.Cell.Acknowledgements" = "Acknowledgements";
"Scene.Settings.Cell.Terms of service" = "Terms of service";
"Scene.Settings.Cell.ReadERC20Warning" = "Read ERC-20 warning";
"Scene.Settings.Cell.ChangeAnalyticsPermissions" = "Change analytics permissions";
"Scene.Settings.Cell.BackupWallet" = "Backup wallet";
"Scene.Settings.Cell.RemoveWallet" = "Remove wallet";
"Scene.Settings.Cell.AppVersion" = "Version";

// MARK: - Confirm Wallet Removal
"Scene.ConfirmWalletRemoval.Title" = "Remove wallet";
"Scene.ConfirmWalletRemoval.Label.AreYouSure" = "Are you sure you want to remove your wallet?";
"Scene.ConfirmWalletRemoval.Checkbox.BackUpWallet" = "I understand that I will permanently lose any asset in this wallet if I have not backed up the wallet.";
"Scene.ConfirmWalletRemoval.Button.Confirm" = "Confirm";
