// MARK: - Generic
"Generic.OK" = "OK";
"Generic.Close" = "Close";
"Generic.Next" = "Next";
"Generic.Skip" = "Skip";
"Generic.Back" = "Back";

"Error.Input.Address.ContainsNonHexadecimal" = "Only 0-9 and A-F allowed";
"Error.Input.Address.TooShort" = "Address is too short, should be %d";
"Error.Input.Address.TooLoong" = "Address is too long, should be %d";

"Error.Input.Amount.TooSmall" = "Amount must be greater than %@";
"Error.Input.Amount.TooLarge" = "Amount must be smaller than %@";

// MARK: - Common for Views
"View.PullToRefreshControl.Title" = "Pull to refresh";

// MARK: - Onboarding

// MARK: TermsOfService
"Scene.TermsOfService.Button.Accept" = "Accept";

// MARK: AskForAnalyticsPermissions
"Scene.AskForAnalyticsPermissions.Title" = "Analytics disclaimer";
"Scene.AskForAnalyticsPermissions.Text.Disclaimer" = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
"Scene.AskForAnalyticsPermissions.SwitchLabel.ReadDisclaimer" = "I have read the analytics disclaimer";
"Scene.AskForAnalyticsPermissions.Button.Accept" = "Accept";
"Scene.AskForAnalyticsPermissions.Button.Decline" = "Decline";

// MARK: WarningERC20
"Scene.WarningERC20.Title" = "⚠️ WARNING ⚠️";
"Scene.WarningERC20.Text.WarningERC20" = "This is a Zilliqa testnet. Please do not send any interim ERC-20 ZIL tokens to this wallet.\n\nZilliqa and the Ethereum blockchain are two completely separate platforms and the mneumonic phrases, private keys, addresses and tokens CANNOT be shared.\n\nTransferring assets directly from Ethereum to Zilliqa (or vice versa) will cause irreparable loss.";
"Scene.WarningERC20.Button.Accept" = "I understand";
"Scene.WarningERC20.Button.DoNotShowAgain" = "Do not show this again";

// MARK: ChooseWallet
"Scene.ChooseWallet.Title" = "Add Wallet";
"Scene.ChooseWallet.Button.NewWallet" = "New Wallet";
"Scene.ChooseWallet.Button.RestoreWallet" = "Restore Wallet";

// MARK: CreateNewWallet
"Scene.CreateNewWallet.Title" = "New wallet";
"Scene.CreateNewWallet.Label.ChooseNewPassphrase" = "Choose new passphrase";
"Scene.CreateNewWallet.Field.EncryptionPassphrase" = "Encryption passphrase (min %d chars)";
"Scene.CreateNewWallet.Field.ConfirmEncryptionPassphrase" = "Confirm encryption passphrase";
"Scene.CreateNewWallet.Label.UrgeBackup" = "⚠️ I understand that I'm responsible for securely backing up the encryption passphrase and might suffer permanent loss of all assets if I fail to do so.";
"Scene.CreateNewWallet.SwitchLabel.PassphraseIsBackedUp" = "Passphrase is backed up";
"Scene.CreateNewWallet.Button.CreateNewWallet" = "Create new wallet";

// MARK: BackupWallet
"Scene.BackupWallet.Title" = "Backup Wallet";
"Scene.BackupWallet.Label.StoreKeystoreSecurely" = "Store the keystore + passphrase somewhere safe (e.g. 1Password)";
"Scene.BackupWallet.Button.CopyKeystore" = "Copy keystore";
"Scene.BackupWallet.Label.UrgeSecureBackupOfKeystore" = "⚠️ I understand that I'm responsible for securely backing up the keystore and might suffer permanent loss of all assets if I fail to do so.";
"Scene.BackupWallet.SwitchLabel.KeystoreIsBackedUp" = "Keystore is backed up";
"Scene.BackupWallet.Button.HaveBackedUpProceed" = "I've backed up, proceed";
"Scene.BackupWallet.Event.Toast.DidCopyKeystore" = "Copied keystore";

// MARK: RestoreWallet
"Scene.RestoreWallet.Title" = "Restore Wallet";
"Scene.RestoreWallet.Field.PrivateKey" = "Private key";
"Scene.RestoreWallet.Label.OrKeystore" = "Or paste keystore (JSON) below";
"Scene.RestoreWallet.Field.EncryptionPassphrase" = "Encryption passphrase (min %d chars)";
"Scene.RestoreWallet.Field.ConfirmEncryptionPassphrase" = "Confirm encryption passphrase";
"Scene.RestoreWallet.Button.RestoreWallet" = "Restore Wallet";

// MARK: ChoosePincode
"Scene.ChoosePincode.Title" = "Set app PIN";
"Scene.ChoosePincode.Button.ProceedWithConfirmation" = "Proceed";
"Scene.ChoosePincode.Text.PincodeOnlyLocksApp" = "This pincode is optional and is only used to lock this app when you close it, its purpose is to protect against unwanted users to access the app. This pincode has nothing to do with the cryptography related to you wallet. However, if you have not backed up your wallet and forget this pincode you will be locked out of this app and thus your wallet";


// MARK: ConfirmNewPincode
"Scene.ConfirmNewPincode.Title" = "Confirm app PIN";
"Scene.ConfirmNewPincode.SwitchLabel.PincodeIsBackedUp" = "I've backed up my PIN code";
"Scene.ConfirmNewPincode.Button.ConfirmPincode" = "Confirm";


// MARK: - Main Flow

// MARK: Main
"Scene.Main.Label.Balance.Title" = "Your balance";
"Scene.Main.Label.Balance.Value" = "%@ ZILs";
"Scene.Main.Button.Send" = "Send";
"Scene.Main.Button.Receive" = "Receive";

// MARK: Unlock App
"Scene.UnlockAppWithPincode.Title" = "Unlock app";

// MARK: Remove Pincode
"Scene.RemovePincode.Title" = "Unlock to remove";
"Scene.RemovePincode.Event.Toast.DidRemovePincode" = "Pincode removed";

// MARK: PrepareTransaction
"Scene.PrepareTransaction.Title" = "Send";
"Scene.PrepareTransaction.Field.Recipient" = "To address";
"Scene.PrepareTransaction.Field.Amount" = "Amount";
"Scene.PrepareTransaction.Field.GasLimit" = "Gas limit";
"Scene.PrepareTransaction.Field.GasPrice" = "Gas price";
"Scene.PrepareTransaction.Field.EncryptionPassphrase" = "Encryption passphrase";
"Scene.PrepareTransaction.Button.Send" = "Send";
"Scene.PrepareTransaction.Label.TransactionId" = "Transaction Id";
"Scene.PrepareTransaction.Labels.Balance.Title" = "Current balance";
"Scene.PrepareTransaction.Labels.Balance.Value" = "%@ ZILs";
"Scene.PrepareTransaction.Button.SeeTransactionInfo" = "See transaction Info";

// MARK: SignTransaction
"Scene.SignTransaction.Label.SignTransactionWithEncryptionPassphrase" = "Confirm transaction with your passphrase";
"Scene.SignTransaction.Field.EncryptionPassphrase" = "Encryption passphrase";
"Scene.SignTransaction.Button.Confirm" = "Confirm";

// MARK: Recieve
"Scene.Receive.Title" = "Receive";
"Scene.Receive.Label.MyPublicAddress" = "My public address";
"Scene.Receive.Button.CopyMyAddress" = "Copy address";
"Scene.Receive.Button.Share" = "Share address";
"Scene.Receive.Event.Toast.DidCopyAddress" = "Copied address";
"Scene.Receive.Field.Amount" = "Amount";

// MARK: - Settings
"Scene.Settings.Title" = "Settings";

"Scene.Settings.Cell.RemovePincode" = "Remove pincode";
"Scene.Settings.Cell.SetPincode" = "Set pincode";

"Scene.Settings.Cell.StarUsOnGithub" = "Star us on Github";
"Scene.Settings.Cell.ReportIssueOnGithub" = "Report issue on Github";
"Scene.Settings.Cell.Acknowledgements" = "Acknowledgements";
"Scene.Settings.Cell.Terms of service" = "Terms of service";
"Scene.Settings.Cell.ReadERC20Warning" = "Read ERC-20 warning";
"Scene.Settings.Cell.BackupWallet" = "Backup wallet";
"Scene.Settings.Cell.RemoveWallet" = "Remove wallet";
"Scene.Settings.Cell.AppVersion" = "Version";


